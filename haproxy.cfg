global
  daemon
  log 127.0.0.1 local0
  log 127.0.0.1 local1 notice
  maxconn 4096

defaults
  log               global
  retries           3
  maxconn           2000
  timeout connect   5s
  timeout client    50s
  timeout server    50s

  frontend http_in
  bind localhost:8000
  mode http
  default_backend event_service
  acl app1 path_end -i /event
  use_backend event_service if app1

backend event_service
  balance roundrobin
  mode http
  option forwardfor
  timeout server    50s

  frontend http_in
  bind localhost:8000
  mode http
  default_backend event_service
  acl app1 path_end -i /event
  use_backend event_service if app1

backend event_service
  balance roundrobin
  mode http
  option forwardfor
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request add-header X-Forwarded-Proto https if { ssl_fc }
  server server1 127.0.0.1:3000 check
  server server2 127.0.0.1:3001 check

  // const apm = require('elastic-apm-node').start({
//   appName: 'Video Streaming Service',
//   serverUrl: 'http://localhost:8200',
// });
const express = require('express');
const bodyParser = require('body-parser');
const cluster = require('cluster');
const routes = require('./routes');
const redis = require('redis');
const genPath = require('../videos/assets/content_generators/generatePath');
const fs = require('fs');

let client = redis.createClient();

client.on('error', function (err) {
  // console.log('Error ' + err);
});

let app = express();

app.use(bodyParser.json());
// app.use(apm.middleware.express());
// app.use(routes);

let app2 = express();
let app3 = express();
let app4 = express();

app2.use(bodyParser.json());
// app.use(apm.middleware.express());
// app2.use(routes);

// if in the master process
// let serve = (port) => {
//   if (cluster.isMaster) {
//     let cpuCount = require('os').cpus().length;
//     for (let i = 0; i < cpuCount; i++) {
//       cluster.fork();
//     }
//   } else {
// if in worker process
app.get('/video/:Id', (req, res) => {
  console.log(3000);
  let videoID = req.params.Id;
  let bytesSent = 0;
  // retrieve video path from redis cache
  client.get(videoID, (error, result) => {
    if (result) {
      // get file size
      let stats = fs.statSync(`${result}`);
      let fileSizeInBytes = stats.size;

      // send video stream 
      res.writeHead(200, { 'Content-Type': 'video/mp4' });
      // create stream to collect data
      let stream = fs.createReadStream(`${result}`);
      stream.on('data', (chunk) => {
        bytesSent += chunk.length;
        // console.log(`Sent: ${chunk.length} bytes, Total: ${bytesSent}/${fileSizeInBytes} bytes`);
      }).pipe(res);
      stream.on('end', () => {
        // console.log(`Sent ${fileSizeInBytes}/${fileSizeInBytes} bytes`);
      });
    } else {
      // if video not in cache and id less than 5000 get store video[id]
      if (videoID <= 5000) {
        // add to video cache
        client.set(videoID, `../videos/video_files/${videoID}.mp4`);
        // console.log(`Added video ID:${videoID} to cache`);

        let stats = fs.statSync(`../videos/video_files/${videoID}.mp4`);
        let fileSizeInBytes = stats.size;

        res.writeHead(200, { 'Content-Type': 'video/mp4' });
        let stream = fs.createReadStream(`../videos/video_files/${videoID}.mp4`);
        stream.on('data', (chunk) => {
          bytesSent += chunk.length;
          // console.log(`Sent: ${chunk.length} bytes, Total: ${bytesSent}/${fileSizeInBytes} bytes`);
        }).pipe(res);
        stream.on('end', () => {
          // console.log(`Sent ${fileSizeInBytes}/${fileSizeInBytes} bytes`);
        });
      } else {
        // if not in cache and id > 5000 generate path to video and store 
        let path = genPath();

        client.set(videoID, `../videos/video_files/${path}.mp4`);
        // console.log(`Added video ID:${videoID} to cache`);

        let stats = fs.statSync(`../videos/video_files/${path}.mp4`);
        let fileSizeInBytes = stats.size;

        res.writeHead(200, { 'Content-Type': 'video/mp4' });
        let stream = fs.createReadStream(`../videos/video_files/${path}.mp4`);
        stream.on('data', (chunk) => {
          bytesSent += chunk.length;
          // console.log(`Sent: ${chunk.length} bytes, Total: ${bytesSent}/${fileSizeInBytes} bytes`);
        }).pipe(res);
        stream.on('end', () => {
          // console.log(`Sent ${fileSizeInBytes}/${fileSizeInBytes} bytes`);
        });
      }
    }
  });
});

app2.get('/video/:Id', (req, res) => {
  console.log(3001);
  let videoID = req.params.Id;
  let bytesSent = 0;
  // retrieve video path from redis cache
  client.get(videoID, (error, result) => {
    if (result) {
      // get file size
      let stats = fs.statSync(`${result}`);
      let fileSizeInBytes = stats.size;

      // send video stream 
      res.writeHead(200, { 'Content-Type': 'video/mp4' });
      // create stream to collect data
      let stream = fs.createReadStream(`${result}`);
      stream.on('data', (chunk) => {
        bytesSent += chunk.length;
        // console.log(`Sent: ${chunk.length} bytes, Total: ${bytesSent}/${fileSizeInBytes} bytes`);
      }).pipe(res);
      stream.on('end', () => {
        // console.log(`Sent ${fileSizeInBytes}/${fileSizeInBytes} bytes`);
      });
    } else {
      // if video not in cache and id less than 5000 get store video[id]
      if (videoID <= 5000) {
        // add to video cache
        client.set(videoID, `../videos/video_files/${videoID}.mp4`);
        // console.log(`Added video ID:${videoID} to cache`);

        let stats = fs.statSync(`../videos/video_files/${videoID}.mp4`);
        let fileSizeInBytes = stats.size;

        res.writeHead(200, { 'Content-Type': 'video/mp4' });
        let stream = fs.createReadStream(`../videos/video_files/${videoID}.mp4`);
        stream.on('data', (chunk) => {
          bytesSent += chunk.length;
          // console.log(`Sent: ${chunk.length} bytes, Total: ${bytesSent}/${fileSizeInBytes} bytes`);
        }).pipe(res);
        stream.on('end', () => {
          // console.log(`Sent ${fileSizeInBytes}/${fileSizeInBytes} bytes`);
        });
      } else {
        // if not in cache and id > 5000 generate path to video and store 
        let path = genPath();

        client.set(videoID, `../videos/video_files/${path}.mp4`);
        // console.log(`Added video ID:${videoID} to cache`);

        let stats = fs.statSync(`../videos/video_files/${path}.mp4`);
        let fileSizeInBytes = stats.size;

        res.writeHead(200, { 'Content-Type': 'video/mp4' });
        let stream = fs.createReadStream(`../videos/video_files/${path}.mp4`);
        stream.on('data', (chunk) => {
          bytesSent += chunk.length;
          // console.log(`Sent: ${chunk.length} bytes, Total: ${bytesSent}/${fileSizeInBytes} bytes`);
        }).pipe(res);
        stream.on('end', () => {
          // console.log(`Sent ${fileSizeInBytes}/${fileSizeInBytes} bytes`);
        });
      }
    }
  });
});

app3.get('/video/:Id', (req, res) => {
  console.log(3002);
  let videoID = req.params.Id;
  let bytesSent = 0;
  // retrieve video path from redis cache
  client.get(videoID, (error, result) => {
    if (result) {
      // get file size
      let stats = fs.statSync(`${result}`);
      let fileSizeInBytes = stats.size;

      // send video stream 
      res.writeHead(200, { 'Content-Type': 'video/mp4' });
      // create stream to collect data
      let stream = fs.createReadStream(`${result}`);
      stream.on('data', (chunk) => {
        bytesSent += chunk.length;
        // console.log(`Sent: ${chunk.length} bytes, Total: ${bytesSent}/${fileSizeInBytes} bytes`);
      }).pipe(res);
      stream.on('end', () => {
        // console.log(`Sent ${fileSizeInBytes}/${fileSizeInBytes} bytes`);
      });
    } else {
      // if video not in cache and id less than 5000 get store video[id]
      if (videoID <= 5000) {
        // add to video cache
        client.set(videoID, `../videos/video_files/${videoID}.mp4`);
        // console.log(`Added video ID:${videoID} to cache`);

        let stats = fs.statSync(`../videos/video_files/${videoID}.mp4`);
        let fileSizeInBytes = stats.size;

        res.writeHead(200, { 'Content-Type': 'video/mp4' });
        let stream = fs.createReadStream(`../videos/video_files/${videoID}.mp4`);
        stream.on('data', (chunk) => {
          bytesSent += chunk.length;
          // console.log(`Sent: ${chunk.length} bytes, Total: ${bytesSent}/${fileSizeInBytes} bytes`);
        }).pipe(res);
        stream.on('end', () => {
          // console.log(`Sent ${fileSizeInBytes}/${fileSizeInBytes} bytes`);
        });
      } else {
        // if not in cache and id > 5000 generate path to video and store 
        let path = genPath();

        client.set(videoID, `../videos/video_files/${path}.mp4`);
        // console.log(`Added video ID:${videoID} to cache`);

        let stats = fs.statSync(`../videos/video_files/${path}.mp4`);
        let fileSizeInBytes = stats.size;

        res.writeHead(200, { 'Content-Type': 'video/mp4' });
        let stream = fs.createReadStream(`../videos/video_files/${path}.mp4`);
        stream.on('data', (chunk) => {
          bytesSent += chunk.length;
          // console.log(`Sent: ${chunk.length} bytes, Total: ${bytesSent}/${fileSizeInBytes} bytes`);
        }).pipe(res);
        stream.on('end', () => {
          // console.log(`Sent ${fileSizeInBytes}/${fileSizeInBytes} bytes`);
        });
      }
    }
  });
});
app4.get('/video/:Id', (req, res) => {
  console.log(3003);
  let videoID = req.params.Id;
  let bytesSent = 0;
  // retrieve video path from redis cache
  client.get(videoID, (error, result) => {
    if (result) {
      // get file size
      let stats = fs.statSync(`${result}`);
      let fileSizeInBytes = stats.size;

      // send video stream 
      res.writeHead(200, { 'Content-Type': 'video/mp4' });
      // create stream to collect data
      let stream = fs.createReadStream(`${result}`);
      stream.on('data', (chunk) => {
        bytesSent += chunk.length;
        // console.log(`Sent: ${chunk.length} bytes, Total: ${bytesSent}/${fileSizeInBytes} bytes`);
      }).pipe(res);
      stream.on('end', () => {
        // console.log(`Sent ${fileSizeInBytes}/${fileSizeInBytes} bytes`);
      });
    } else {
      // if video not in cache and id less than 5000 get store video[id]
      if (videoID <= 5000) {
        // add to video cache
        client.set(videoID, `../videos/video_files/${videoID}.mp4`);
        // console.log(`Added video ID:${videoID} to cache`);

        let stats = fs.statSync(`../videos/video_files/${videoID}.mp4`);
        let fileSizeInBytes = stats.size;

        res.writeHead(200, { 'Content-Type': 'video/mp4' });
        let stream = fs.createReadStream(`../videos/video_files/${videoID}.mp4`);
        stream.on('data', (chunk) => {
          bytesSent += chunk.length;
          // console.log(`Sent: ${chunk.length} bytes, Total: ${bytesSent}/${fileSizeInBytes} bytes`);
        }).pipe(res);
        stream.on('end', () => {
          // console.log(`Sent ${fileSizeInBytes}/${fileSizeInBytes} bytes`);
        });
      } else {
        // if not in cache and id > 5000 generate path to video and store 
        let path = genPath();

        client.set(videoID, `../videos/video_files/${path}.mp4`);
        // console.log(`Added video ID:${videoID} to cache`);

        let stats = fs.statSync(`../videos/video_files/${path}.mp4`);
        let fileSizeInBytes = stats.size;

        res.writeHead(200, { 'Content-Type': 'video/mp4' });
        let stream = fs.createReadStream(`../videos/video_files/${path}.mp4`);
        stream.on('data', (chunk) => {
          bytesSent += chunk.length;
          // console.log(`Sent: ${chunk.length} bytes, Total: ${bytesSent}/${fileSizeInBytes} bytes`);
        }).pipe(res);
        stream.on('end', () => {
          // console.log(`Sent ${fileSizeInBytes}/${fileSizeInBytes} bytes`);
        });
      }
    }
  });
});

app.listen(3000, () => {
  console.log(`Listening on port 3000`);
});

app2.listen(3001, () => {
  console.log(`Listening on port 3001`);
});

app3.listen(3002, () => {
  console.log(`Listening on port 3003`);
});
app4.listen(3003, () => {
  console.log(`Listening on port 3002`);
});
// }
// };

// serve(3000);
// serve(3001);
